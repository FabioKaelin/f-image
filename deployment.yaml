apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: f-image
  namespace: f-image
  labels:
    app: f-image
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteMany
    # - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: "8Gi"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: f-image-sa
  namespace: f-image

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: f-image
  namespace: f-image
spec:
  selector:
    matchLabels:
      app: f-image
  replicas: 1
  template:
    metadata:
      labels:
        app: f-image
    spec:
      serviceAccountName: f-image-sa # <-- Use custom ServiceAccount
      containers:
      - name: f-image
        image: ghcr.io/fabiokaelin/f-image:1.0.9
        ports:
        - containerPort: 8002
        volumeMounts:
        - mountPath: /public/dynamic
          mountPropagation: None
          name: f-image
        env:
        - name: GIN_MODE
          value: "release"
        - name: NOTIFICATION_ID
          value: "RHxMmpGcX"
        - name: JSON_LOGS
          value: "false"
        - name: F_VERSION
          value: "1.0.8"
        resources:
          limits:
            cpu: 100m
            memory: 256Mi
          requests:
            cpu: 20m
            memory: 16Mi
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/ping
            port: 8002
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /api/ping
            port: 8002
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 1
        # securityContext: # <-- Add security context
        #   runAsNonRoot: true
        #   runAsUser: 1000
        #   allowPrivilegeEscalation: false
        #   readOnlyRootFilesystem: true
        #   capabilities:
        #     drop: ["ALL"]
      automountServiceAccountToken: false
      imagePullSecrets:
      - name: regcred
      volumes:
      - name: f-image
        persistentVolumeClaim:
          claimName: f-image

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: f-image-deny-all
  namespace: f-image
spec:
  podSelector:
    matchLabels:
      app: f-image
  policyTypes:
    - Ingress
    - Egress

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: f-image-allow-ingress
  namespace: f-image
spec:
  podSelector:
    matchLabels:
      app: f-image
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              fimageconnection: true
      ports:
        - protocol: TCP
          port: 8002
    - from:
        - podSelector: {} # Allow from same namespace (adjust as needed)
      ports:
        - protocol: TCP
          port: 8002

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: f-image-allow-egress
  namespace: f-image
spec:
  podSelector:
    matchLabels:
      app: f-image
  policyTypes:
    - Egress
  egress:
    - to:
        - podSelector: {} # Allow to same namespace (adjust as needed)
      ports:
        - protocol: TCP
          port: 53 # Example: DNS
        - protocol: UDP
          port: 53
---
apiVersion: v1
kind: Service
metadata:
  name: f-image
  namespace: f-image
spec:
  selector:
    app: f-image
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8002
